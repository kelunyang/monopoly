// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, Recaptcha2, request;

  Promise = require('bluebird');

  request = require('request');

  Recaptcha2 = (function() {
    var errorList;

    errorList = {
      'request-error': 'Api request failed .',
      'json-parse': 'Response JSON parse failed.',
      'missing-input-secret': 'The secret parameter is missing.',
      'invalid-input-secret': 'The secret parameter is invalid or malformed.',
      'missing-input-response': 'The response parameter is missing.',
      'invalid-input-response': 'The response parameter is invalid or malformed.'
    };

    function Recaptcha2(config) {
      this.config = config;
      if (this.config.ssl === void 0) {
        this.config.ssl = true;
      }
      if (this.config.ssl) {
        this.api = "https://www.google.com/recaptcha/api/siteverify";
      } else {
        this.api = "http://www.google.com/recaptcha/api/siteverify";
      }
    }

    Recaptcha2.prototype.validate = function(response, remoteip) {
      var $;
      if (response == null) {
        response = '';
      }
      $ = this;
      return new Promise(function(resolve, reject) {
        var options;
        if (response === '') {
          return reject(['missing-input-response']);
        }
        options = {
          url: $.api,
          method: 'POST',
          form: {
            secret: $.config.secretKey,
            response: response
          }
        };
        if (remoteip !== void 0) {
          options.form.remoteip = remoteip;
        }
        return request(options, function(error, response, body) {
          var result, tryErr;
          if (error) {
            return reject(['request-error', error.toString()]);
          } else {
            try {
              result = JSON.parse(body);
              if (result.success) {
                return resolve(true);
              } else {
                return reject(result['error-codes']);
              }
            } catch (_error) {
              tryErr = _error;
              return reject(['request-error', 'json-parse']);
            }
          }
        });
      });
    };

    Recaptcha2.prototype.validateRequest = function(req) {
      return this.validate(req.body['g-recaptcha-response']);
    };

    Recaptcha2.prototype.translateErrors = function(errorCodes) {
      var i, key, len, ret;
      if (Array.isArray(errorCodes)) {
        ret = [];
        for (i = 0, len = errorCodes.length; i < len; i++) {
          key = errorCodes[i];
          ret.push(errorList[key] || key);
        }
        return ret;
      } else {
        return errorList[key] || key;
      }
    };

    Recaptcha2.prototype.formElement = function(htmlClass) {
      return "<div class=\"" + (htmlClass || 'g-recaptcha') + "\" data-sitekey=\"" + this.config.siteKey + "\"></div>";
    };

    return Recaptcha2;

  })();

  module.exports = Recaptcha2;

}).call(this);
